#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t rw_mutex, mutex;
int read_count = 0;

void *reader(void *arg) {
    int id = *((int*)arg);
    for (int i=0; i<3; i++) {
        sem_wait(&mutex);
        read_count++;
        if (read_count == 1) sem_wait(&rw_mutex);
        sem_post(&mutex);

        printf("Reader %d is reading\n", id);
        sleep(1);

        sem_wait(&mutex);
        read_count--;
        if (read_count == 0) sem_post(&rw_mutex);
        sem_post(&mutex);
        sleep(1);
    }
    return NULL;
}

void *writer(void *arg) {
    int id = *((int*)arg);
    for (int i=0; i<3; i++) {
        sem_wait(&rw_mutex);
        printf("Writer %d is writing\n", id);
        sleep(2);
        sem_post(&rw_mutex);
        sleep(1);
    }
    return NULL;
}

int main() {
    pthread_t r1, r2, w1;
    int rID1=1, rID2=2, wID=1;

    sem_init(&rw_mutex, 0, 1);
    sem_init(&mutex, 0, 1);

    pthread_create(&r1, NULL, reader, &rID1);
    pthread_create(&r2, NULL, reader, &rID2);
    pthread_create(&w1, NULL, writer, &wID);

    pthread_join(r1, NULL);
    pthread_join(r2, NULL);
    pthread_join(w1, NULL);

    sem_destroy(&rw_mutex);
    sem_destroy(&mutex);
    return 0;
}
